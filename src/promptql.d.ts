/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    "/execute_program": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Execute Program */
        post: operations["execute_program_execute_program_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Query */
        post: operations["query_query_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        /** ApiAnthropicConfig */
        ApiAnthropicConfig: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            provider: "anthropic";
            /** Model */
            model?: string | null;
            /** Base Url */
            base_url?: string | null;
            /** Api Key */
            api_key: string;
        };
        /** ApiOpenAIConfig */
        ApiOpenAIConfig: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            provider: "openai";
            /** Model */
            model?: string | null;
            /** Base Url */
            base_url?: string | null;
            /** Api Key */
            api_key: string;
        };
        /** ApiThreadAssistantAction */
        ApiThreadAssistantAction: {
            /** Message */
            message?: string | null;
            /** Plan */
            plan?: string | null;
            /** Code */
            code?: string | null;
            /** Automation Code */
            automation_code?: string | null;
            /** Code Output */
            code_output?: string | null;
            /** Code Error */
            code_error?: string | null;
        };
        /** ApiThreadInteraction */
        ApiThreadInteraction: {
            user_message: components["schemas"]["ApiThreadUserMessage"];
            /** Assistant Actions */
            assistant_actions?: components["schemas"]["ApiThreadAssistantAction"][];
            /** Error */
            error?: string | null;
            /** Completion Timestamp */
            completion_timestamp?: string | null;
            /** Canceled Timestamp */
            canceled_timestamp?: string | null;
            /** Error Timestamp */
            error_timestamp?: string | null;
        };
        /** ApiThreadUserMessage */
        ApiThreadUserMessage: {
            /** Text */
            text: string;
        };
        /** AutomationArtifact */
        AutomationArtifact: {
            /** Identifier */
            identifier: string;
            /** Title */
            title: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            artifact_type: "automation";
            /** @description Automation data containing Python code and optional sample input */
            data: components["schemas"]["AutomationArtifactData"];
        };
        /**
         * AutomationArtifactData
         * @description Data structure for automation artifacts containing code and parsed schemas.
         *
         *     Attributes:
         *         code: The Python code for the automation
         *         input_schema: Parsed JSON schema for input validation (extracted from code comments)
         *         output_schema: Parsed JSON schema for output validation (extracted from code comments)
         */
        AutomationArtifactData: {
            /** Code */
            code: string;
            /**
             * Input Schema
             * @default null
             */
            input_schema: {
                [key: string]: unknown;
            } | null;
            /**
             * Output Schema
             * @default null
             */
            output_schema: {
                [key: string]: unknown;
            } | null;
        };
        /** DdnConfig */
        DdnConfig: {
            /**
             * Url
             * @description URL of the /sql endpoint on Hasura DDN
             */
            url: string;
            /**
             * Headers
             * @description HTTP headers that should be forwarded to DDN
             */
            headers?: {
                [key: string]: string;
            };
        };
        /** DdnConfigV2 */
        DdnConfigV2: {
            /**
             * Build Id
             * @description UUID of the DDN build. If both build_id and build_version are None, uses the applied build.
             */
            build_id?: string | null;
            /**
             * Build Version
             * @description Version of the DDN build. If both build_id and build_version are None, uses the applied build.
             */
            build_version?: string | null;
            /**
             * Headers
             * @description HTTP headers that should be forwarded to DDN
             */
            headers?: {
                [key: string]: string;
            };
        };
        /** ExecuteRequestV1 */
        ExecuteRequestV1: {
            /** Version */
            version?: "v1" | null;
            /** Code */
            code: string;
            /**
             * Promptql Api Key
             * @deprecated
             */
            promptql_api_key?: string | null;
            /** Ai Primitives Llm */
            ai_primitives_llm: (components["schemas"]["HasuraLlmConfigV1"] | components["schemas"]["ApiOpenAIConfig"] | components["schemas"]["ApiAnthropicConfig"]) | null;
            ddn: components["schemas"]["DdnConfig"] | null;
            /** Artifacts */
            artifacts: (components["schemas"]["TextArtifact"] | components["schemas"]["TableArtifact"] | components["schemas"]["VisualizationArtifact"] | components["schemas"]["AutomationArtifact"])[];
        };
        /** ExecuteRequestV2 */
        ExecuteRequestV2: {
            /**
             * Version
             * @constant
             */
            version: "v2";
            /** Code */
            code: string;
            ddn?: components["schemas"]["DdnConfigV2"] | null;
            /** Artifacts */
            artifacts?: (components["schemas"]["TextArtifact"] | components["schemas"]["TableArtifact"] | components["schemas"]["VisualizationArtifact"] | components["schemas"]["AutomationArtifact"])[];
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** HasuraLlmConfigV1 */
        HasuraLlmConfigV1: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            provider: "hasura";
        };
        /** LlmUsage */
        LlmUsage: {
            /**
             * Provider
             * @default unknown
             */
            provider: string;
            /**
             * Model
             * @default unknown
             */
            model: string;
            /**
             * Input Tokens
             * @default 0
             */
            input_tokens: number;
            /**
             * Output Tokens
             * @default 0
             */
            output_tokens: number;
            /**
             * Cached Tokens
             * @default 0
             */
            cached_tokens: number;
        };
        /** PromptQlExecutionResult */
        PromptQlExecutionResult: {
            /** Output */
            output: string;
            /** Error */
            error: string | null;
            /** Accessed Artifact Ids */
            accessed_artifact_ids: string[];
            /** Modified Artifacts */
            modified_artifacts: (components["schemas"]["TextArtifact"] | components["schemas"]["TableArtifact"] | components["schemas"]["VisualizationArtifact"] | components["schemas"]["AutomationArtifact"])[];
            /** Llm Usages */
            llm_usages: components["schemas"]["LlmUsage"][];
        };
        /** QueryRequestV1 */
        QueryRequestV1: {
            /** Stream */
            stream: boolean;
            /** Artifacts */
            artifacts?: (components["schemas"]["TextArtifact"] | components["schemas"]["TableArtifact"] | components["schemas"]["VisualizationArtifact"] | components["schemas"]["AutomationArtifact"])[];
            /**
             * Timezone
             * @description An IANA timezone used to interpret queries that implicitly require timezones
             */
            timezone: string;
            /** Interactions */
            interactions: components["schemas"]["ApiThreadInteraction"][];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            version: "v1";
            /**
             * Promptql Api Key
             * @deprecated
             */
            promptql_api_key?: string | null;
            /** Llm */
            llm?: components["schemas"]["HasuraLlmConfigV1"] | components["schemas"]["ApiOpenAIConfig"] | components["schemas"]["ApiAnthropicConfig"];
            /** Ai Primitives Llm */
            ai_primitives_llm?: (components["schemas"]["HasuraLlmConfigV1"] | components["schemas"]["ApiOpenAIConfig"] | components["schemas"]["ApiAnthropicConfig"]) | null;
            ddn: components["schemas"]["DdnConfig"];
            /** System Instructions */
            system_instructions?: string | null;
        };
        /** QueryRequestV2 */
        QueryRequestV2: {
            /** Stream */
            stream: boolean;
            /** Artifacts */
            artifacts?: (components["schemas"]["TextArtifact"] | components["schemas"]["TableArtifact"] | components["schemas"]["VisualizationArtifact"] | components["schemas"]["AutomationArtifact"])[];
            /**
             * Timezone
             * @description An IANA timezone used to interpret queries that implicitly require timezones
             */
            timezone: string;
            /** Interactions */
            interactions: components["schemas"]["ApiThreadInteraction"][];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            version: "v2";
            ddn: components["schemas"]["DdnConfigV2"];
        };
        /** QueryResponse */
        QueryResponse: {
            /**
             * Thread Id
             * Format: uuid
             */
            thread_id: string;
            /** Assistant Actions */
            assistant_actions: components["schemas"]["ApiThreadAssistantAction"][];
            /**
             * Modified Artifacts
             * @description List of artifacts created or updated in this request. May contain duplicate artifact identifiers.
             */
            modified_artifacts: (components["schemas"]["TextArtifact"] | components["schemas"]["TableArtifact"] | components["schemas"]["VisualizationArtifact"] | components["schemas"]["AutomationArtifact"])[];
        };
        /** TableArtifact */
        TableArtifact: {
            /** Identifier */
            identifier: string;
            /** Title */
            title: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            artifact_type: "table";
            /**
             * Data
             * @description Table data as a list of objects, with the object keys being column names
             */
            data: {
                [key: string]: unknown;
            }[];
        };
        /** TextArtifact */
        TextArtifact: {
            /** Identifier */
            identifier: string;
            /** Title */
            title: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            artifact_type: "text";
            /** Data */
            data: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** VisualizationArtifact */
        VisualizationArtifact: {
            /** Identifier */
            identifier: string;
            /** Title */
            title: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            artifact_type: "visualization";
            /** @description Visualization data containing HTML and visualization data */
            data: components["schemas"]["VisualizationArtifactData"];
        };
        /**
         * VisualizationArtifactData
         * @description Data structure for visualization artifacts containing HTML and associated data.
         *
         *     Attributes:
         *         html: The HTML markup for rendering the visualization
         *         visualization_data: The underlying data used to generate the visualization
         */
        VisualizationArtifactData: {
            /** Html */
            html: string;
            /** Visualization Data */
            visualization_data: unknown;
        };
        QueryResponseChunk: components["schemas"]["ThreadMetadataChunk"] | components["schemas"]["AssistantActionChunk"] | components["schemas"]["ArtifactUpdateChunk"] | components["schemas"]["ErrorChunk"];
        /** ArtifactUpdateChunk */
        ArtifactUpdateChunk: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "artifact_update_chunk";
            /** Artifact */
            artifact: components["schemas"]["TextArtifact"] | components["schemas"]["TableArtifact"] | components["schemas"]["VisualizationArtifact"] | components["schemas"]["AutomationArtifact"];
        };
        /** AssistantActionChunk */
        AssistantActionChunk: {
            /**
             * Message
             * @default null
             */
            message: string | null;
            /**
             * Plan
             * @default null
             */
            plan: string | null;
            /**
             * Code
             * @default null
             */
            code: string | null;
            /**
             * Automation Code
             * @default null
             */
            automation_code: string | null;
            /**
             * Code Output
             * @default null
             */
            code_output: string | null;
            /**
             * Code Error
             * @default null
             */
            code_error: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "assistant_action_chunk";
            /** Index */
            index: number;
        };
        /** ErrorChunk */
        ErrorChunk: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "error_chunk";
            /** Error */
            error: string;
        };
        /** ThreadMetadataChunk */
        ThreadMetadataChunk: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "thread_metadata_chunk";
            /**
             * Thread Id
             * Format: uuid
             */
            thread_id: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type ApiAnthropicConfig = components['schemas']['ApiAnthropicConfig'];
export type ApiOpenAiConfig = components['schemas']['ApiOpenAIConfig'];
export type ApiThreadAssistantAction = components['schemas']['ApiThreadAssistantAction'];
export type ApiThreadInteraction = components['schemas']['ApiThreadInteraction'];
export type ApiThreadUserMessage = components['schemas']['ApiThreadUserMessage'];
export type AutomationArtifact = components['schemas']['AutomationArtifact'];
export type AutomationArtifactData = components['schemas']['AutomationArtifactData'];
export type DdnConfig = components['schemas']['DdnConfig'];
export type DdnConfigV2 = components['schemas']['DdnConfigV2'];
export type ExecuteRequestV1 = components['schemas']['ExecuteRequestV1'];
export type ExecuteRequestV2 = components['schemas']['ExecuteRequestV2'];
export type HttpValidationError = components['schemas']['HTTPValidationError'];
export type HasuraLlmConfigV1 = components['schemas']['HasuraLlmConfigV1'];
export type LlmUsage = components['schemas']['LlmUsage'];
export type PromptQlExecutionResult = components['schemas']['PromptQlExecutionResult'];
export type QueryRequestV1 = components['schemas']['QueryRequestV1'];
export type QueryRequestV2 = components['schemas']['QueryRequestV2'];
export type QueryResponse = components['schemas']['QueryResponse'];
export type TableArtifact = components['schemas']['TableArtifact'];
export type TextArtifact = components['schemas']['TextArtifact'];
export type ValidationError = components['schemas']['ValidationError'];
export type VisualizationArtifact = components['schemas']['VisualizationArtifact'];
export type VisualizationArtifactData = components['schemas']['VisualizationArtifactData'];
export type QueryResponseChunk = components['schemas']['QueryResponseChunk'];
export type ArtifactUpdateChunk = components['schemas']['ArtifactUpdateChunk'];
export type AssistantActionChunk = components['schemas']['AssistantActionChunk'];
export type ErrorChunk = components['schemas']['ErrorChunk'];
export type ThreadMetadataChunk = components['schemas']['ThreadMetadataChunk'];
export type $defs = Record<string, never>;
export interface operations {
    execute_program_execute_program_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExecuteRequestV1"] | components["schemas"]["ExecuteRequestV2"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PromptQlExecutionResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    query_query_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QueryRequestV1"] | components["schemas"]["QueryRequestV2"];
            };
        };
        responses: {
            /** @description Either a JSON response (QueryResponse object) or a stream of Server-Sent Events (SSE) (QueryResponseChunk objects) depending on whether the 'stream' parameter was set */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QueryResponse"];
                    /** @example data: {"message":"Let me try to store an artifact","plan":null,"code":null,"automation_code":null,"code_output":null,"code_error":null,"type":"assistant_action_chunk","index":0}
                     *
                     *     data: {"message":null,"plan":"- Store an artifact with sample data","code":null,"automation_code":null,"code_output":null,"code_error":null,"type":"assistant_action_chunk","index":0}
                     *
                     *     data: {"message":null,"plan":null,"code":"executor.store_artitfact('test', 'Test artifact', 'table', [{'foo':'bar'}])","automation_code":null,"code_output":null,"code_error":null,"type":"assistant_action_chunk","index":0}
                     *
                     *     data: {"message":null,"plan":null,"code":null,"automation_code":null,"code_output":"Artifact stored","code_error":null,"type":"assistant_action_chunk","index":0}
                     *
                     *     data: {"type":"artifact_update_chunk","artifact":{"identifier":"test","title":"Test Artifact","artifact_type":"table","data":[{"foo":"bar"}]}}
                     *
                     *     data: {"message":"Your artifact is <artifact","plan":null,"code":null,"automation_code":null,"code_output":null,"code_error":null,"type":"assistant_action_chunk","index":1}
                     *
                     *     data: {"message":" identifier='test'/>","plan":null,"code":null,"automation_code":null,"code_output":null,"code_error":null,"type":"assistant_action_chunk","index":1}
                     *
                     *     data: {"type":"thread_metadata_chunk","thread_id":"00000000-0000-0000-0000-000000000000"}
                     *
                     *      */
                    "text/event-stream": components["schemas"]["QueryResponseChunk"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
